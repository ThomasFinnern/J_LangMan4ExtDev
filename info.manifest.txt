

getInstallationXML


$help = $xml->xpath('/form/help');

if ($manifest->getName() != 'extension')

$rootMenu = $manifest->administration->menu;

						if ($menu = $xml->xpath('layout[1]'))
						{
							$menu = $menu[0];

			// 1.5 Format; Core files or language packs then
			// 1.6 3PD Extension Support
			$lang->load($item->module . '.sys', $client->path)
				|| $lang->load($item->module . '.sys', $client->path . '/modules/' . $item->module);
			$item->name = Text::_($item->name);

			if (isset($item->xml) && $text = trim($item->xml->description))
			{
				$item->desc = Text::_($text);
			}

	// Get the help data from the XML file if present.
		$help = $xml->xpath('/extension/help');

		if (!empty($help))
		{
			$helpKey = trim((string) $help[0]['key']);
			$helpURL = trim((string) $help[0]['url']);

			$this->helpKey = $helpKey ?: $this->helpKey;
			$this->helpURL = $helpURL ?: $this->helpURL;
		}

                   $result = $xmlOuter->xpath("//field");

                    // extract name and value from all fields
                    foreach ($result as $item) {

                        // convert to array
                        $fieldAttributes = current($item->attributes());

                        $type = $fieldAttributes ['type'];

                        // Valid data ?
                        if ($type != 'spacer' && $type != 'note') {

                            $name = $fieldAttributes ['name'];
                            // default existing ?
                            if (isset ($fieldAttributes ['default'])) {
                                $value = $fieldAttributes ['default'];
                            } else {
                                $value = "";


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

			$manifest = simplexml_load_file($toPath . '/templateDetails.xml');

			// Copy language files from global folder
			if ($languages = $manifest->languages)
			{
				$folder        = (string) $languages->attributes()->folder;
				$languageFiles = $languages->language;

				Folder::create($toPath . '/' . $folder . '/' . $languageFiles->attributes()->tag);

				foreach ($languageFiles as $languageFile)
				{
					$src = Path::clean($client->path . '/language/' . $languageFile);
					$dst = Path::clean($toPath . '/' . $folder . '/' . $languageFile);

					if (File::exists($src))
					{
						File::copy($src, $dst);
					}
				}
			}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

		$this->setManifest($xml);
		// Attempt to load the language file; might have uninstall strings
		$this->loadLanguage();

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

		$name = $xml->getName();

		if ($name !== 'extension' && $name !== 'metafile')
		{
			unset($xml);

			return false;
		}

		$data = array();

		$data['name'] = (string) $xml->name;

		// Check if we're a language. If so use metafile.
		$data['type'] = $xml->getName() === 'metafile' ? 'language' : (string) $xml->attributes()->type;

		$data['creationDate'] = ((string) $xml->creationDate) ?: Text::_('JLIB_UNKNOWN');
		$data['author'] = ((string) $xml->author) ?: Text::_('JLIB_UNKNOWN');

		$data['copyright'] = (string) $xml->copyright;
		$data['authorEmail'] = (string) $xml->authorEmail;
		$data['authorUrl'] = (string) $xml->authorUrl;
		$data['version'] = (string) $xml->version;
		$data['description'] = (string) $xml->description;
		$data['group'] = (string) $xml->group;

		// Child template specific fields.
		if (isset($xml->inheritable))
		{
			$data['inheritable'] = (string) $xml->inheritable === '0' ? false : true;
		}

		if (isset($xml->parent) && (string) $xml->parent !== '')
		{
			$data['parent'] = (string) $xml->parent;
		}

		if ($xml->files && \count($xml->files->children()))
		{
			$filename = basename($path);
			$data['filename'] = File::stripExt($filename);

			foreach ($xml->files->children() as $oneFile)
			{
				if ((string) $oneFile->attributes()->plugin)
				{
					$data['filename'] = (string) $oneFile->attributes()->plugin;
					break;
				}
			}
		}

		return $data;


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

			$type = (string) $xml->attributes()->type;

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

			$this->loadManifestFromData($xml);

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

	public static function parseXMLLanguageFile($path)
	{
		if (!is_readable($path))
		{
			throw new \RuntimeException('File not found or not readable');
		}

		// Try to load the file
		$xml = simplexml_load_file($path);

		if (!$xml)
		{
			return;
		}

		// Check that it's a metadata file
		if ((string) $xml->getName() !== 'metafile')
		{
			return;
		}

		$metadata = array();

		foreach ($xml->metadata->children() as $child)
		{
			$metadata[$child->getName()] = (string) $child;
		}

		return $metadata;
	}






